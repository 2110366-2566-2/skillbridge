generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  salutation      String
  firstname       String
  middlename      String?
  lastname        String
  profileImageUrl String?
  lineId          String?   @unique
  facebook        String?   @unique
  email           String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Applied         Applied[]
  Employer        Employer?
  Job             Job[]
  Message         Message[]
  Student         Student?

  @@map("_user")
}

model Student {
  userId        String        @id @unique
  resumeUrl     String?
  transcriptUrl String?
  bankAccountNo String?
  avgStar       Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  transaction   Transaction[]

  @@map("student")
}

model Employer {
  userId       String        @id @unique
  position     String
  organization String
  publicEmail  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  transaction  Transaction[]

  @@map("employer")
}

model Job {
  id                String        @id @default(uuid())
  userId            String
  title             String
  status            JobStatus     @default(NOT_STARTED)
  description       String
  budget            Int
  numWorker         Int           @default(1)
  startDate         DateTime?
  endDate           DateTime?
  estimateStartDate DateTime
  estimateEndDate   DateTime
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  Applied           Applied[]
  chatroom          Chatroom[]
  user              User          @relation(fields: [userId], references: [id])
  Review            Review[]
  transaction       Transaction[]
  jobTags           JobTag[]      @relation("job_tags_relation")

  @@map("job")
}

model JobTag {
  id        String   @id @default(uuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      Job[]    @relation("job_tags_relation")

  @@map("job_tag")
}

model Applied {
  userId      String
  jobId       String
  bid         Float?
  documentUrl String?
  status      AppliedStatus @default(PENDING)
  appliedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  job         Job           @relation(fields: [jobId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@id([userId, jobId])
  @@map("applied")
}

model Chatroom {
  id        String    @id @default(uuid())
  jobId     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  job       Job       @relation(fields: [jobId], references: [id])
  Message   Message[]

  @@map("chatroom")
}

model Message {
  id         String    @id @default(uuid())
  timestamp  DateTime
  chatroomId String
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  unsentAt   DateTime?
  Text       Text?
  Image      Image?
  chatroom   Chatroom  @relation(fields: [chatroomId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@map("message")
}

model Text {
  messageId String   @id
  text      String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@map("_text")
}

model Image {
  messageId String   @id
  imageUrl  String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@map("image")
}

model Transaction {
  id              String   @id @default(uuid())
  jobId           String
  employerId      String
  studentId       String
  paymentId       String?
  receiptImageUrl String?
  PaymentType     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  employer        Employer @relation(fields: [employerId], references: [userId])
  job             Job      @relation(fields: [jobId], references: [id])
  student         Student  @relation(fields: [studentId], references: [userId])

  @@map("transaction")
}

model Review {
  id          String   @id @default(uuid())
  jobId       String
  description String
  Stars       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id])

  @@map("review")
}

enum JobStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum AppliedStatus {
  PENDING
  ACCEPT
  REJECT
}
