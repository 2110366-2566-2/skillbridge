generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  salutation      String
  firstname       String
  middlename      String?
  lastname        String
  profileImageUrl String?
  lineId          String?   @unique
  facebook        String?   @unique
  email           String    @unique
  hashedPassword  String    @db.VarChar(512)
  isGmail         Boolean   @default(false)
  isDeleted       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  student         Student?
  employer        Employer?

  applications Application[]
  messages     Message[]

  @@map("_user")
}

model Student {
  userId        String   @id @unique
  resumeUrl     String?
  transcriptUrl String?
  bankAccountNo String?
  avgStar       Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transactions Transaction[]
  reviews      Review[]
  user         User          @relation(fields: [userId], references: [id])

  @@map("student")
}

model Employer {
  userId       String   @id @unique
  position     String
  organization String
  publicEmail  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  jobs         Job[]
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])

  @@map("employer")
}

model Job {
  id                String    @id @default(uuid())
  title             String
  status            JobStatus @default(NOT_STARTED)
  description       String
  budget            Int
  numWorker         Int       @default(1)
  startDate         DateTime?
  endDate           DateTime?
  estimateStartDate DateTime
  estimateEndDate   DateTime
  isDeleted         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  applications Application[]
  chatrooms    Chatroom[]
  transactions Transaction[]
  reviews      Review[]

  @@map("job")
}

model JobTag {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  job Job[]

  @@map("job_tag")
}

model Application {
  userId      String
  jobId       String
  bid         Float
  documentUrl String?
  status      ApplicationStatus @default(PENDING)
  isDeleted   Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  job         Job               @relation(fields: [jobId], references: [id])
  user        User              @relation(fields: [userId], references: [id])

  @@id([userId, jobId])
  @@map("application")
}

model Chatroom {
  id        String   @id @default(uuid())
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@map("chatroom")
}

model Message {
  id         String   @id @default(uuid())
  chatroomId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  texts    Text[]
  images   Image[]
  chatroom Chatroom @relation(fields: [chatroomId], references: [id])

  @@map("message")
}

model Text {
  messageId String   @id
  text      String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@map("_text")
}

model Image {
  messageId String   @id
  imageUrl  String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@map("image")
}

model Transaction {
  id              String    @id @default(uuid())
  jobId           String
  studentId       String
  paymentId       String?
  receiptImageUrl String?
  paymentType     String?
  isDeleted       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  employer        Employer? @relation(fields: [employerUserId], references: [userId])
  employerUserId  String?

  @@map("transaction")
}

model Review {
  id          String   @id @default(uuid())
  jobId       String
  description String
  stars       Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  studentId   String
  job         Job      @relation(fields: [jobId], references: [id])
  student     Student  @relation(fields: [studentId], references: [userId])

  @@map("review")
}

enum JobStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
