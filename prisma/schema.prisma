generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/database/ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  salutation      String
  firstname       String
  middlename      String?
  lastname        String
  profileImageUrl String?
  lineId          String?       @unique
  facebook        String?       @unique
  email           String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  hashedPassword  String        @db.VarChar(512)
  isDeleted       Boolean       @default(false)
  isGmail         Boolean       @default(false)
  applications    Application[]
  employer        Employer?
  messages        Message[]
  student         Student?

  @@map("_user")
}

model Student {
  userId        String        @id @unique
  resumeUrl     String?
  transcriptUrl String?
  bankAccountNo String?
  avgStar       Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reviews       Review[]
  user          User          @relation(fields: [userId], references: [id])
  transactions  Transaction[]

  @@map("student")
}

model Employer {
  userId       String        @id @unique
  position     String
  organization String
  publicEmail  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  jobs         Job[]
  transactions Transaction[]

  @@map("employer")
}

model Job {
  id                String            @id @default(uuid())
  title             String
  status            JobStatus         @default(NOT_STARTED)
  description       String?
  budget            Int
  numWorker         Int               @default(1)
  startDate         DateTime?
  endDate           DateTime?
  estimateStartDate DateTime
  estimateEndDate   DateTime
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isDeleted         Boolean           @default(false)
  jobTagId          String
  employerId        String
  applications      Application[]
  chatrooms         Chatroom[]
  employer          Employer          @relation(fields: [employerId], references: [userId])
  jobTag            JobTag            @relation(fields: [jobTagId], references: [id])
  jobDocumentFiles  JobDocumentFile[]
  reviews           Review[]
  transactions      Transaction[]

  @@map("job")
}

model JobTag {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  job       Job[]

  @@map("job_tag")
}

model JobDocumentFile {
  id        String   @id @default(uuid())
  jobId     String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  job       Job      @relation(fields: [jobId], references: [id])

  @@map("job_document_file")
}

model Application {
  userId                  String
  jobId                   String
  bid                     Float
  documentUrl             String?
  status                  ApplicationStatus         @default(PENDING)
  isDeleted               Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  job                     Job                       @relation(fields: [jobId], references: [id])
  user                    User                      @relation(fields: [userId], references: [id])
  ApplicationDocumentFile ApplicationDocumentFile[]

  @@id([userId, jobId])
  @@map("application")
}

model ApplicationDocumentFile {
  id                String @id @default(uuid())
  applicationUserId String
  applicationJobId  String

  application Application @relation(fields: [applicationUserId, applicationJobId], references: [userId, jobId])
}

model Chatroom {
  id        String    @id @default(uuid())
  jobId     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  job       Job       @relation(fields: [jobId], references: [id])
  messages  Message[]

  @@map("chatroom")
}

model Message {
  id         String    @id @default(uuid())
  chatroomId String
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  unsentAt   DateTime?
  texts      Text?
  images     Image?
  chatroom   Chatroom  @relation(fields: [chatroomId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@map("message")
}

model Text {
  messageId String   @id
  text      String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@map("_text")
}

model Image {
  messageId String   @id
  imageUrl  String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@map("image")
}

model Transaction {
  id              String    @id @default(uuid())
  jobId           String
  studentId       String
  paymentId       String?
  receiptImageUrl String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isDeleted       Boolean   @default(false)
  employerUserId  String?
  paymentType     String?
  employer        Employer? @relation(fields: [employerUserId], references: [userId])
  job             Job       @relation(fields: [jobId], references: [id])
  student         Student   @relation(fields: [studentId], references: [userId])

  @@map("transaction")
}

model Review {
  id          String   @id @default(uuid())
  jobId       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  studentId   String
  stars       Int
  job         Job      @relation(fields: [jobId], references: [id])
  student     Student  @relation(fields: [studentId], references: [userId])

  @@map("review")
}

enum JobStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
